name: Robot Framework Test

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      BASE_URL:
        description: 'Base URL to run the tests against'
        required: true
        default: 'https://www.saucedemo.com/'
      EXECUTION_ENVIRONMENT:
        description: 'Ambiente de Execução HML ou PROD'
        required: true
        default: 'HML'
      test_tag:
        description: 'Tag dos cenários de teste a serem executados'
        required: true
        default: 'login'  # Tag padrão

jobs:
  Chrome:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Notify Slack - Start
        run: |
          curl -X POST -H 'Content-Type: application/json' \
          -d "{\"text\": \"@all 🤖 Pipeline de testes no Chrome iniciado! 🚀\n🔹 Iniciado por: **${{ github.actor }}**\n🔹 Branch: **${{ github.ref_name }}**\n🔹 Ambiente: **${{ github.event.inputs.EXECUTION_ENVIRONMENT }}**\n🔹 Cenarios: **${{ github.event.inputs.test_tag }}**\"}" \
          "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Run tests
        env:
          EXECUTION_ENVIRONMENT: ${{ github.event.inputs.EXECUTION_ENVIRONMENT || secrets.ENV_HML }}
          BASE_URL: ${{ github.event.inputs.BASE_URL || secrets.BASE_URL }}
          HEADLESS: 'True'
        run: |
          if [ -z "${{ github.event.inputs.test_tag }}" ]; then
            echo "Running all tests"
            pabot -d tests/results tests
          else
            echo "Running tests with tag: ${{ github.event.inputs.test_tag }}"
            pabot -d tests/results --include ${{ github.event.inputs.test_tag }} tests
          fi

      - name: Robot Reporter
        uses: joonvena/robotframework-reporter-action@v2.4
        if: always()
        with:
          gh_access_token: ${{secrets.GITHUB_TOKEN}}
          report_path: tests/results

      - name: Upload Report
        uses: actions/upload-artifact@v4.3.3
        if: always()
        with:
          name: Chrome Report
          path: tests/results

      - name: Notify Slack - Success
        if: success()
        run: |
          REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -X POST -H 'Content-Type: application/json' \
          -d "{\"text\": \"@all ✅ Pipeline de testes no Chrome: \n🔹 Iniciado por: **${{ github.actor }}**\n🔹 Branch: **${{ github.ref_name }}**\n🔹 Ambiente: **${{ github.event.inputs.EXECUTION_ENVIRONMENT }}**\n🔹 Cenarios: **${{ github.event.inputs.test_tag }}** finalizado com sucesso! \n🔹 <${REPORT_URL}|Veja o relatório!>\"}" \
          "${{ secrets.SLACK_WEBHOOK_URL }}"
      
      - name: Notify Slack - Failure
        if: failure()
        run: |
          REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -X POST -H 'Content-Type: application/json' \
          -d "{\"text\": \"@all ❌ Pipeline de testes no Chrome: \n🔹 Iniciado por: **${{ github.actor }}**\n🔹 Branch: **${{ github.ref_name }}**\n🔹 Ambiente: **${{ github.event.inputs.EXECUTION_ENVIRONMENT }}**\n🔹 Cenarios: **${{ github.event.inputs.test_tag }}** falhou! \n🔹 <${REPORT_URL}|Veja o relatório!>\"}" \
          "${{ secrets.SLACK_WEBHOOK_URL }}"

      # - name: Store Test Results in Database
      #   if: always()
      #   run: |
      #     python save_test_results.py

  Firefox:
    runs-on: ubuntu-latest
    continue-on-error: true
    
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    steps:
      - name: Get Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Firefox
        uses: browser-actions/setup-firefox@v1.5.1
        with:
          firefox-version: latest-esr

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Notify Slack - Start
        run: |
          curl -X POST -H 'Content-Type: application/json' \
          -d "{\"text\": \"@all 🤖 Pipeline de testes no Firefox iniciado! 🚀\n🔹 Iniciado por: **${{ github.actor }}**\n🔹 Branch: **${{ github.ref_name }}**\n🔹 Ambiente: **${{ github.event.inputs.EXECUTION_ENVIRONMENT }}**\n🔹 Cenarios: **${{ github.event.inputs.test_tag }}**\"}" \
          "${{ secrets.SLACK_WEBHOOK_URL }}"

      - name: Run tests
        env:
          EXECUTION_ENVIRONMENT: ${{ secrets.ENV_PROD }}
          BASE_URL: ${{ github.event.inputs.BASE_URL || secrets.BASE_URL }}
          HEADLESS: 'True'
        run: |
          if [ -z "${{ github.event.inputs.test_tag }}" ]; then
            echo "Running all tests"
            pabot -d tests/results tests
          else
            echo "Running tests with tag: ${{ github.event.inputs.test_tag }}"
            pabot -d tests/results --include ${{ github.event.inputs.test_tag }} tests
          fi

      - name: Robot Reporter
        uses: joonvena/robotframework-reporter-action@v2.4
        if: always()
        with:
          gh_access_token: ${{secrets.GITHUB_TOKEN}}
          report_path: tests/results

      - name: Upload Report
        uses: actions/upload-artifact@v4.3.3
        if: always()
        with:
          name: Firefox Report
          path: tests/results

      - name: Notify Slack - Success
        if: success()
        run: |
          REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -X POST -H 'Content-Type: application/json' \
          -d "{\"text\": \"@all ✅ Pipeline de testes no Firefox: \n🔹 Iniciado por: **${{ github.actor }}**\n🔹 Branch: **${{ github.ref_name }}**\n🔹 Ambiente: **${{ github.event.inputs.EXECUTION_ENVIRONMENT }}**\n🔹 Cenarios: **${{ github.event.inputs.test_tag }}** finalizado com sucesso! \n🔹 <${REPORT_URL}|Veja o relatório!>\"}" \
          "${{ secrets.SLACK_WEBHOOK_URL }}"
        
      - name: Notify Slack - Failure
        if: failure()
        run: |
          REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -X POST -H 'Content-Type: application/json' \
          -d "{\"text\": \"@all ❌ Pipeline de testes no Firefox: \n🔹 Iniciado por: **${{ github.actor }}**\n🔹 Branch: **${{ github.ref_name }}**\n🔹 Ambiente: **${{ github.event.inputs.EXECUTION_ENVIRONMENT }}**\n🔹 Cenarios: **${{ github.event.inputs.test_tag }}** falhou! \n🔹 <${REPORT_URL}|Veja o relatório!>\"}" \
          "${{ secrets.SLACK_WEBHOOK_URL }}"

      # - name: Store Test Results in Database
      #   if: always()
      #   run: |
      #     python save_test_results.py
